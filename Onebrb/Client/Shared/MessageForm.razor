@using Onebrb.Shared.ViewModels.Message;
@using System.Text;
@using System.Text.Json;
@using System.Net.Http
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Onebrb.Client.Options
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject HttpClient Http

<div class="message-form">
    <Notification CssClass="@NotificationCssClass" Message="@ResponseMessage"></Notification>

    <EditForm Model="@viewModel" OnValidSubmit="SendMessage">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h3>Messaging @Recipient</h3>

        <InputText type="hidden" @bind-Value="@Recipient" class="form-control"></InputText>
        <div class="form-group">
            Title:
            <InputText type="text" @bind-Value="@viewModel.Title" class="form-control"></InputText>
        </div>
        <div class="form-group">
            Text:
            <InputTextArea @bind-Value="@viewModel.Body" class="form-control"></InputTextArea>
        </div>
        <button class="btn btn-success" disabled="@IsSendBtnDisabled"><i class="fas fa-paper-plane fas--space-right"></i>Send</button>
        <a class="btn btn-secondary"><i class="fas fa-window-close fas--space-right"></i>Cancel</a>
    </EditForm>
</div>

@code {
    private CreateMessageViewModel viewModel = new CreateMessageViewModel();
    private HttpResponseMessage response;

    [Parameter]
    public string Recipient { get; set; }

    public string ResponseMessage { get; set; }
    public string NotificationCssClass { get; set; }
    public bool IsMessageSent { get; set; }
    public bool UserExists { get; set; }
    public bool IsSendBtnDisabled { get; set; } = true;
    public MessageEndpointOptions ApiMessagesEndpoint { get; private set; }

    private async Task SendMessage()
    {
        if (IsMessageSent)
        {
            return;
        }

        if (viewModel != null && Recipient != null)
        {
            var messageEndpoint = Configuration
                                    .GetSection(MessageEndpointOptions.ApiMessagesEndpoint)
                                    .Get<MessageEndpointOptions>();

            viewModel.Recipient = Recipient;

            string jsonString = JsonSerializer.Serialize(viewModel);

            if (!string.IsNullOrEmpty(jsonString))
            {
                NotificationCssClass = "alert alert-info";
                ResponseMessage = $"Sending message, please wait...";

                response = await Http.PostAsync(messageEndpoint.CreateMessage,
                    new StringContent(jsonString, Encoding.UTF8, "application/json"));

                if (response != null && response.IsSuccessStatusCode)
                {
                    IsSendBtnDisabled = true;
                    ResponseMessage = "The message has been sent.";
                    NotificationCssClass = "alert alert-success";
                    IsMessageSent = true;
                }
                else
                {
                    ResponseMessage = $"Couldn't send the message, please try again later.";
                    NotificationCssClass = "alert alert-danger";
                    IsSendBtnDisabled = true;
                }
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"https://localhost:5001/api/User/{Recipient}");

        // The recipient username doesn't exist
        if (!response.IsSuccessStatusCode)
        {
            NotificationCssClass = "alert alert-danger";
            ResponseMessage = $"{Recipient} user doesn't exist.";
        }
        else
        {
            IsSendBtnDisabled = false;
        }

    }
}
